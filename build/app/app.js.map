{"version":3,"file":"app.js","sourceRoot":"","sources":["../../src/app/app.ts"],"names":[],"mappings":";;AAAA,2BAAyB;AAEzB,mCAAiD;AAEjD,mCAAqC;AACrC,+BAAyC;AACzC,6DAA0D;AAC1D,6BAAyC;AACzC,mCAA+C;AAE/C,IAAM,MAAM,GAAW,sBAAa,CAAC,SAAS,EAAE,CAAC;AAGjD,IAAM,SAAS,GAAc,IAAI,kBAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AAGxD,IAAM,WAAW,GAAoB,IAAI,sBAAe,EAAE,CAAC;AAG3D,IAAM,SAAS,GAAW,sBAAgB,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;AAGrE,IAAM,eAAe,GAAG;IACtB,4BAAmB,CAAC,oBAAoB;IACxC,4BAAmB,CAAC,kBAAkB;CACvC,CAAC;AAEF,IAAM,GAAG,GAAY,uCAAiB,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;AAIlG,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE;IACzB,MAAM,CAAC,IAAI,CAAC,sCAAoC,SAAS,CAAC,IAAM,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC","sourcesContent":["import 'core-js/library';\n\nimport { Logger, LoggerFactory } from './common';\nimport { Express, Router } from 'express';\nimport { AppConfig } from './config';\nimport { AppDataServices } from './data';\nimport { ExpressAppFactory } from './express-app-factory';\nimport { ApiRouterFactory } from './api';\nimport { RestErrorMiddleware } from './common';\n\nconst LOGGER: Logger = LoggerFactory.getLogger();\n\n// Turn environment variables into a strongly typed configuration object\nconst appConfig: AppConfig = new AppConfig(process.env);\n\n// Create the application data services\nconst appServices: AppDataServices = new AppDataServices();\n\n// Create the application router (to be mounted by the express server)\nconst apiRouter: Router = ApiRouterFactory.getApiRouter(appServices);\n\n// Get the application middleware (to be mounted after the api router)\nconst errorMiddleware = [\n  RestErrorMiddleware.normalizeToRestError,\n  RestErrorMiddleware.serializeRestError\n];\n\nconst app: Express = ExpressAppFactory.getExpressApp(appConfig, apiRouter, null, errorMiddleware);\n\n////////////////////\n\napp.listen(appConfig.port, () => {\n  LOGGER.info(`Express server listening on port ${appConfig.port}`);\n});"]}