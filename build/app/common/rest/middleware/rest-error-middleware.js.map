{"version":3,"file":"rest-error-middleware.js","sourceRoot":"","sources":["../../../../../src/app/common/rest/middleware/rest-error-middleware.ts"],"names":[],"mappings":";;AAAA,gDAAkD;AAClD,oCAAgH;AAChH,yCAAsD;AAEtD;IAAA;IA2CA,CAAC;IAtCQ,wCAAoB,GAA3B,UAA4B,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;QAE7C,EAAE,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACnB,CAAC;QAGD,EAAE,CAAC,CAAC,GAAG,YAAY,WAAW,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,IAAI,CAAC,IAAI,yBAAgB,EAAE,CAAC,CAAC;QACtC,CAAC;QAGD,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,IAAI,kBAAS,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QACjF,CAAC;QAGD,MAAM,CAAC,IAAI,CAAC,IAAI,sBAAa,CAAC,GAAG,CAAC,CAAC,CAAC;IACtC,CAAC;IAIM,sCAAkB,GAAzB,UAA0B,GAAc,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;QAEtD,EAAE,CAAC,CAAC,GAAG,YAAY,sBAAa,CAAC,CAAC,CAAC;YACjC,IAAM,uBAAuB,GAAW,cAAc,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YAC1E,mBAAmB,CAAC,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC5D,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAM,uBAAuB,GAAW,cAAc,CAAC,GAAG,CAAC,CAAC;YAC5D,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAC3D,CAAC;QAGD,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC;YACzC,KAAK,EAAE,GAAG;SACX,CAAC,CAAC;IACL,CAAC;IAxCsB,0BAAM,GAAW,uBAAa,CAAC,SAAS,EAAE,CAAC;IA0CpE,0BAAC;CAAA,AA3CD,IA2CC;AA3CY,kDAAmB","sourcesContent":["import * as serializeError from 'serialize-error';\nimport { RestError, BadRequestError, InvalidJsonError, InternalError, InvalidResourceUrlError} from '../errors';\nimport { Logger, LoggerFactory } from '../../logging';\n\nexport class RestErrorMiddleware {\n  public static readonly LOGGER: Logger = LoggerFactory.getLogger();\n\n  // Error handling middleware that takes an incoming error, normalizes it to some\n  // subclass of HttpError and passes it along (to eventually be logged/serialized)\n  static normalizeToRestError(err, req, res, next) {\n    // Already wrapped in HttpError\n    if (err.httpStatusCode) {\n      return next(err);\n    }\n\n    // Syntax error (caused by invalid client JSON)\n    if (err instanceof SyntaxError) {\n      return next(new InvalidJsonError());\n    }\n\n    // External http call errors\n    if (err.statusCode) {\n      return next(new RestError(err.message, err.statusCode, err.message, err.name));\n    }\n\n    // Internal error\n    return next(new InternalError(err));\n  }\n\n  // This should typically be the last error handling middleware that's mounted by express.\n  // This will serialize the error to the user, and log it.\n  static serializeRestError(err: RestError, req, res, next) {\n\n    if (err instanceof InternalError) {\n      const logFriendlyErrorMessage: string = serializeError(err.originalError);\n      RestErrorMiddleware.LOGGER.error(logFriendlyErrorMessage);\n    } else {\n      const logFriendlyErrorMessage: string = serializeError(err);\n      RestErrorMiddleware.LOGGER.warn(logFriendlyErrorMessage);\n    }\n\n    // serialize the error\n    return res.status(err.httpStatusCode).json({\n      error: err\n    });\n  }\n\n}\n"]}