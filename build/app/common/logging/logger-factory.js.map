{"version":3,"file":"logger-factory.js","sourceRoot":"","sources":["../../../../src/app/common/logging/logger-factory.ts"],"names":[],"mappings":";;AAAA,iCAAoC;AAGpC;IAGI;IAAuB,CAAC;IAMjB,uBAAS,GAAhB;QACI,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;YACxB,IAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAE1C,aAAa,CAAC,MAAM,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC;gBACtC,UAAU,EAAE;oBACR,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;iBACnE;aACJ,CAAC,CAAC;QACP,CAAC;QAED,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC;IAChC,CAAC;IACL,oBAAC;AAAD,CAAC,AAtBD,IAsBC;AAtBY,sCAAa","sourcesContent":["import winston = require('winston');\nimport { LoggerInstance } from 'winston';\n\nexport class LoggerFactory {\n    private static logger: LoggerInstance;\n\n    private constructor() {}\n\n    // This gives the appearance of creating new loggers via a factory pattern, however,\n    // right now, there's no compelling reason to have multiple logger instances throughout\n    // the application. As a result, it's really implementing a Singleton pattern. This may\n    // change later, due to logging requirements/functionality that i'm currently unaware of.\n    static getLogger(): LoggerInstance {\n        if (!LoggerFactory.logger) {\n            const logLevel = process.env['LOG_LEVEL'];\n\n            LoggerFactory.logger = new winston.Logger({\n                transports: [\n                    new (winston.transports.Console)({ level: logLevel, raw: true })\n                ]\n            });\n        }\n\n        return LoggerFactory.logger;\n    }\n}\n\nexport { LoggerInstance as Logger };"]}