{"version":3,"file":"impl-artists-service.js","sourceRoot":"","sources":["../../../../../src/app/data/data-services/artists/impl-artists-service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Album } from '../../models';\nimport { Artist } from '../../models';\nimport { ArtistsService } from './artists-service';\nimport * as request from 'request-promise-native';\n\nexport class ImplArtistsService implements ArtistsService {\n  private static readonly USER_AGENT: string = 'Bex/0.0.1 ( bex@justarrived.se )';\n  private static readonly MUSIC_BRAINZ_API_URL: string = 'http://musicbrainz.org/ws/2/';\n  private static readonly WIKIPEDIA_API_URL: string = 'https://en.wikipedia.org/w/api.php';\n  private static readonly COVER_ART_ARCHIVE_API_URL: string = 'http://coverartarchive.org/';\n\n  get(id: string): Promise<Artist> {\n    return this.getArtistData(id).then(data => new Artist(data));\n  }\n\n  private getArtistData(id: string): Promise<any> {\n    return request(this.getArtistRequestOptions(id))\n    .then(body => {\n      let wikipediaRelation = body.relations.find(relation =>\n        relation.type === 'wikipedia' && relation.url && relation.url.resource);\n\n      return Promise.all([\n        this.getArtistDescription(wikipediaRelation),\n        this.getAlbumsData(body['release-groups'])\n      ])\n      .then(results => {\n        let description = results[0];\n        let albums = results[1];\n\n        return {\n          id: id,\n          description: description,\n          albums: albums\n        };\n      });\n    });\n  }\n\n  private getArtistDescription(wikipediaRelation: any): Promise<string> {\n    return new Promise((resolve, reject) => {\n      if (!wikipediaRelation) {\n        resolve('');\n      } else {\n        let wikipediaName = wikipediaRelation.url.resource.split('/').pop();\n\n        resolve(request(this.getArtistDescriptionRequestOptions(wikipediaName))\n        .then(body => {\n          let pages = body.query.pages;\n          let attributes = Object.keys(pages);\n          if (attributes.length) {\n            let page = pages[attributes[0]];\n            return page.extract;\n          } else {\n            return '';\n          }\n        }));\n      }\n    })\n  }\n\n  private getAlbumsData(releaseGroups: Array<any>): Promise<Array<any>> {\n    return Promise.all(releaseGroups.map(releaseGroup => {\n      return this.getAlbumData(releaseGroup);\n    }))\n  }\n\n  private getAlbumData(releaseGroup: any): Promise<any> {\n    return request(this.getAlbumRequestOptions(releaseGroup['id']))\n    .then(body => {\n      return {\n        id: releaseGroup['id'],\n        title: releaseGroup['title'],\n        images: body.images.map(image => image.image)\n      };\n    })\n    .catch(err => {\n      if (err.statusCode === 404) {\n        return {\n          id: releaseGroup['id'],\n          title: releaseGroup['title'],\n          images: []\n        };\n      } else {\n        throw err;\n      }\n    });\n  }\n\n  private getArtistRequestOptions(id: string): any {\n    return {\n      uri: '/artist/' + id,\n      baseUrl: ImplArtistsService.MUSIC_BRAINZ_API_URL,\n      qs: {\n        fmt: 'json',\n        inc: 'url-rels+release-groups'\n      },\n      headers: {\n        'User-Agent': ImplArtistsService.USER_AGENT,\n      },\n      json: true\n    }\n  }\n\n  private getArtistDescriptionRequestOptions(wikipediaName: string): any {\n    return {\n      url: ImplArtistsService.WIKIPEDIA_API_URL,\n      qs: {\n        action: 'query',\n        format: 'json',\n        prop: 'extracts',\n        exintro: 'true',\n        redirects: 'true',\n        titles: wikipediaName\n      },\n      headers: {\n        'User-Agent': ImplArtistsService.USER_AGENT,\n      },\n      json: true\n    }\n  }\n\n  private getAlbumRequestOptions(id: string): any {\n    return {\n      uri: '/release-group/' + id,\n      baseUrl: ImplArtistsService.COVER_ART_ARCHIVE_API_URL,\n      headers: {\n        'User-Agent': ImplArtistsService.USER_AGENT,\n      },\n      json: true\n    }\n  }\n}\n"]}