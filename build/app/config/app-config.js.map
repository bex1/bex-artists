{"version":3,"file":"app-config.js","sourceRoot":"","sources":["../../../src/app/config/app-config.ts"],"names":[],"mappings":";;AAAA,kCAAuC;AAEvC;IASE,mBAAoB,WAAgB;QAAhB,gBAAW,GAAX,WAAW,CAAK;QAElC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAC1C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QAClD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;QAGzD,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,gBAAgB,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;IAC9F,CAAC;IAED,kCAAc,GAAd;QACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAIO,oCAAgB,GAAxB,UAAyB,YAAoB,EAAE,YAA4B;QAA5B,6BAAA,EAAA,mBAA4B;QACzE,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;QAEzD,IAAM,YAAY,GACd,0BAAwB,YAAY,sCAAmC,CAAC;QAE5E,MAAM,CAAC,mBAAW,CAAC,YAAY,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;IACvD,CAAC;IAEO,oCAAgB,GAAxB,UAAyB,YAAoB,EAAE,YAA2B;QAA3B,6BAAA,EAAA,mBAA2B;QACxE,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;QAEzD,IAAM,YAAY,GACd,0BAAwB,YAAY,sCAAmC,CAAC;QAE5E,MAAM,CAAC,mBAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;IACnD,CAAC;IAEO,mCAAe,GAAvB,UAAwB,YAAoB,EAAE,YAA2B;QAA3B,6BAAA,EAAA,mBAA2B;QACvE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IACpD,CAAC;IAEO,6BAAS,GAAjB,UAAkB,YAAoB,EAAE,YAAuC;QAC7E,IAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,YAAY,CAAC;QAE7D,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;YAClB,MAAM,IAAI,KAAK,CAAC,0BAAwB,YAAY,kBAAe,CAAC,CAAC;QACvE,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IACH,gBAAC;AAAD,CAAC,AAxDD,IAwDC;AAxDY,8BAAS","sourcesContent":["import { StringUtils } from '../utils';\n\nexport class AppConfig {\n  // required environment variables\n  port: number;\n  logLevel: string; // 'debug' | 'verbose' | 'info' | 'warn' | 'error';\n  serveStatic: boolean;\n\n  // optional environment variables\n  enableHttpRequestLogging: boolean;\n\n  constructor(private environment: any) {\n    // required environment variables\n    this.port = this.getIntegerEnvVar('PORT');\n    this.logLevel = this.getStringEnvVar('LOG_LEVEL');\n    this.serveStatic = this.getBooleanEnvVar('SERVE_STATIC');\n\n    // optional environment variables\n    this.enableHttpRequestLogging = this.getBooleanEnvVar('ENABLE_HTTP_REQUEST_LOGGING', false);\n  }\n\n  getEnvironment(): any {\n    return this.environment;\n  }\n\n  /////////////////////////\n\n  private getBooleanEnvVar(variableName: string, defaultValue: boolean = null): boolean {\n    const value = this.getEnvVar(variableName, defaultValue);\n\n    const errorMessage =\n        `Environment Variable ${variableName} does not contain a valid boolean`;\n\n    return StringUtils.parseBoolean(value, errorMessage);\n  }\n\n  private getIntegerEnvVar(variableName: string, defaultValue: number = null): number {\n    const value = this.getEnvVar(variableName, defaultValue);\n\n    const errorMessage =\n        `Environment Variable ${variableName} does not contain a valid integer`;\n\n    return StringUtils.parseInt(value, errorMessage);\n  }\n\n  private getStringEnvVar(variableName: string, defaultValue: string = null): string {\n    return this.getEnvVar(variableName, defaultValue);\n  }\n\n  private getEnvVar(variableName: string, defaultValue: boolean | number | string): string {\n    const value = this.environment[variableName] || defaultValue;\n\n    if (value == null) {\n      throw new Error(`Environment Variable ${variableName} must be set!`);\n    }\n\n    return value;\n  }\n}\n"]}